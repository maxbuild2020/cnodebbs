{"remainingRequest":"/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/frank/Documents/GitHub/cnodebbs-vue2/src/home/register.vue?vue&type=template&id=64761d6c&scoped=true&","dependencies":[{"path":"/Users/frank/Documents/GitHub/cnodebbs-vue2/src/home/register.vue","mtime":1592920753023},{"path":"/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/frank/Documents/GitHub/cnodebbs-vue2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}